<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	<resultMap type="Member" id="memberResultSet">
		<id property="memberNo" column="MEMBER_NO"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="memberNickname" column="MEMBER_NICKNAME"/>
		<result property="memberPwd" column="MEMBER_PWD"/>
		<result property="memberEmail" column="MEMBER_EMAIL"/>
		<result property="memberGender" column="MEMBER_GENDER"/>
		<result property="memberPhone" column="MEMBER_PHONE"/>
		<result property="memberBirth" column="MEMBER_BIRTH"/>
		<result property="memberIntroduce" column="MEMBER_INTRODUCE"/>
		<result property="memberPlace" column="MEMBER_PLACE"/>
		<result property="memberCategory" column="MEMBER_CATEGORY"/>
		<result property="memberProfile" column="MEMBER_PROFILE"/>
		<result property="memberSignupDate" column="MEMBER_SIGNUP_DATE"/>
		<result property="memberGrade" column="MEMBER_GRADE"/>
		<result property="memberTicket" column="MEMBER_TICKET"/>
		<result property="memberAccount" column="MEMBER_ACCOUNT"/>
		<result property="memberIdSort" column="MEMBER_ID_SORT"/>
		<result property="memberStatus" column="MEMBER_STATUS"/>
		<result property="memberRating" column="MEMBER_RATING"/>
	</resultMap>
	

	<!-- 로그인  -->
	<select id="signInMember" parameterType="Member" resultMap="memberResultSet"> 
		SELECT MEMBER_NO, MEMBER_ID, MEMBER_NICKNAME, MEMBER_PWD, MEMBER_EMAIL, MEMBER_GENDER,
			   MEMBER_GENDER, MEMBER_PHONE, MEMBER_BIRTH, MEMBER_INTRODUCE, MEMBER_PLACE,
			   MEMBER_CATEGORY, MEMBER_PROFILE, MEMBER_SIGNUP_DATE, MEMBER_GRADE,
			   MEMBER_TICKET, MEMBER_ACCOUNT, MEMBER_ID_SORT, MEMBER_STATUS
		
		 FROM MEMBER
			WHERE MEMBER_ID= #{memberId }
		<!-- 	AND MEMBER_PWD = #{memberPwd } -->
			AND MEMBER_STATUS = 'Y'
	
	</select>
	
	<!-- 회원 가입  -->
	<insert id="createId" parameterType="Member">
		INSERT INTO MEMBER
			VALUES(MEM_SEQ.NEXTVAL, #{memberId}, #{memberNickname}, #{memberPwd}, 
				#{memberEmail}, #{memberGender}, #{memberPhone}, #{memberBirth},
				#{memberIntroduce}, #{memberPlace}, #{memberCategory},
				#{memberProfile}, SYSDATE, DEFAULT,
				DEFAULT, #{memberAccount}, 'N', DEFAULT)
				
	</insert>
	
	<!-- 회원 아이디 조회  ajax-->
  	<select id="idUniqueCheck" parameterType="Member" resultType="_int">
  		SELECT COUNT(*) FROM MEMBER 
  		WHERE MEMBER_ID = #{memberId}
  	</select>
	
	<!-- 회원 닉네임 조회 ajax-->
  	<select id="memberNickUnique" parameterType="Member" resultType="_int">
  		SELECT COUNT(*) FROM MEMBER 
  		WHERE MEMBER_NICKNAME = #{memberNickname}
  	</select>
	
	<!-- 회원 닉네임 조회 ajax-->
  	<select id="memberEmailUnique" parameterType="Member" resultType="_int">
  		SELECT COUNT(*) FROM MEMBER 
  		WHERE MEMBER_EMAIL = #{memberEmail}
  	</select>
	
	
	
	<!-- 관리자 회원 수 조회 -->
	<select id="adminMemberCount" parameterType="map" resultType="_int">
		SELECT COUNT(*) FROM V_MEMBER_A
		<where>
			<if test="searchValue != null">
				<bind name="sv" value="'%' + _parameter.searchValue + '%'" />
				<choose>
					<when test="searchKey == 'id'">
						AND MEMBER_ID LIKE #{sv}
					</when>
					<otherwise>
						AND MEMBER_NICKNAME LIKE #{sv}
					</otherwise>
				</choose>
			</if>
		</where>
	</select>
	
	<!-- 관리자 회원 조회 -->
	<select id="adminSelectMember" parameterType="map" resultMap="memberResultSet">
		SELECT *
		FROM V_MEMBER_A
			<if test="searchValue != null">
		<where>
				<bind name="sv" value="'%' + _parameter.searchValue + '%'" />
				<choose>
					<when test="searchKey == 'id'">
						AND MEMBER_ID LIKE #{sv}
					</when>
					<otherwise>
						AND MEMBER_NICKNAME LIKE #{sv}
					</otherwise>
				</choose>
		</where>
			</if>
			<if test="delSort == 'sort'">
			ORDER BY MEMBER_STATUS
			</if>
	</select>
	
	<update id="refundTicket" parameterType="map">
		UPDATE MEMBER SET
		MEMBER_TICKET = MEMBER_TICKET + #{ticket}
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<update id="adminDelete" parameterType="_int">
		UPDATE MEMBER SET
		MEMBER_STATUS = 'N'
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<update id="adminRecover" parameterType="_int">
		UPDATE MEMBER SET
		MEMBER_STATUS = 'Y'
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<update id="updateAccount" parameterType="Member">
		UPDATE MEMBER SET
		MEMBER_ACCOUNT = #{memberAccount}
		WHERE MEMBER_NO = #{memberNo}
	</update>
	<update id="updatePassword" parameterType="Member">
	
	UPDATE MEMBER SET MEMBER_PWD = #{memberPwd}
	WHERE MEMBER_NO = #{memberNo}
	
	</update>
	
	<update id="deleteMember" parameterType="Member" >
	UPDATE MEMBER SET MEMBER_STATUS = 'N'
	WHERE MEMBER_NO = #{memberNo}
	</update>
	<update id="updateMember" parameterType="Member">
	UPDATE MEMBER SET 
	MEMBER_NICKNAME = #{memberNickname},
	<if test="memberProfile!=null">
	MEMBER_PROFILE = #{memberProfile},
	</if>
	MEMBER_EMAIL = #{memberEmail},
	MEMBER_GENDER = #{memberGender},
	MEMBER_PHONE = #{memberPhone},
	MEMBER_BIRTH = #{memberBirth},
	MEMBER_INTRODUCE = #{memberIntroduce},
	MEMBER_PLACE = #{memberPlace},
	MEMBER_CATEGORY = #{memberCategory}
	WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- google 계정 가입 여부 체크  -->
	<select id="checkSocialId" parameterType="string" resultMap="memberResultSet">
		SELECT MEMBER_NO, MEMBER_ID, MEMBER_NICKNAME, MEMBER_EMAIL, 
			   MEMBER_GENDER, MEMBER_PHONE, MEMBER_BIRTH, MEMBER_INTRODUCE, MEMBER_PLACE,
			   MEMBER_CATEGORY, MEMBER_PROFILE, MEMBER_SIGNUP_DATE, MEMBER_GRADE,
			   MEMBER_TICKET, MEMBER_ACCOUNT, MEMBER_ID_SORT, MEMBER_STATUS
		FROM MEMBER
		WHERE MEMBER_ID = #{memberId}
		AND MEMBER_STATUS = 'Y'
	</select>
	
	<!-- google 회원 가입 -->
	<insert id="socialSignUp" parameterType="Member">
		INSERT INTO MEMBER
			VALUES(MEM_SEQ.NEXTVAL, #{memberId}, #{memberNickname} || NICK_SEQ.NEXTVAL, #{memberPwd}, 
				#{memberEmail}, #{memberGender}, #{memberPhone}, SYSDATE,
				DEFAULT, #{memberPlace}, #{memberCategory},
				DEFAULT, SYSDATE, DEFAULT,
				DEFAULT, DEFAULT, #{memberIdSort}, DEFAULT)
	</insert>
	
	<select id="selectMember" parameterType="_int" resultMap="memberResultSet">
		SELECT MEMBER_NO, MEMBER_NICKNAME, MEMBER_GENDER, MEMBER_BIRTH, MEMBER_INTRODUCE, MEMBER_PLACE,
				MEMBER_CATEGORY, MEMBER_PROFILE
		FROM MEMBER
		WHERE MEMBER_NO = #{memberNo}
		AND MEMBER_STATUS = 'Y'
	</select>
	
	<select id="checkSocialEmail" parameterType="string" resultMap="memberResultSet">
		SELECT * FROM MEMBER
		WHERE MEMBER_EMAIL = #{memberEmail}
	</select>
	
	<select id="checkFavorite" parameterType="Favorite" resultType="_int">
		SELECT COUNT(*) FROM FAVORITE
		WHERE MEMBER_NO = #{memberNo}
		AND FAVORITE_NO = #{favoriteNo}
	</select>
	
	<insert id="doFavorite" parameterType="Favorite">
		INSERT INTO FAVORITE
		VALUES(#{memberNo}, #{favoriteNo}, '호호')
	</insert>
	
	<delete id="undoFavorite" parameterType="Favorite">
		DELETE FROM FAVORITE
		WHERE MEMBER_NO = #{memberNo}
		AND FAVORITE_NO = #{favoriteNo}
	</delete>
	
	<update id="updateTicket" parameterType="Ticket">
	UPDATE MEMBER SET MEMBER_TICKET = (MEMBER_TICKET-#{paymentTicket})
	WHERE MEMBER_NO = #{memberNo}
	
	</update>
	
	<!-- 즐겨찾기 수 조회 -->
	<select id="getFavoriteCount" parameterType="_int" resultType="_int">
		SELECT COUNT(MEMBER_NO) FROM V_FAVORITE
		WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 즐겨찾기 목록 조회 -->
	<!-- MEMBER_TICKET = FAVORITE_NO -->
	<!-- FAVORITE_MEMO = MEMBER_INTRODUCE -->
	<select id="moveFavorite" parameterType="_int" resultMap="memberResultSet">
		SELECT * FROM V_FAVORITE
		WHERE MEMBER_NO = #{memberNo}
	</select>
	<!-- 즐겨찾기 메모 변경 -->
	<update id="changeMemo" parameterType="Member">
		UPDATE FAVORITE SET
		FAVORITE_MEMO = #{memberIntroduce}
		WHERE MEMBER_NO = #{memberNo}
		AND FAVORITE_NO = #{memberTicket}
	</update>
	
	<!-- 즐겨찾기 삭제 -->
	<delete id="deleteFavorite" parameterType="Member">
		DELETE FROM FAVORITE
		WHERE MEMBER_NO=#{memberNo}
		AND FAVORITE_NO=#{memberTicket}
	</delete>
	
</mapper>
